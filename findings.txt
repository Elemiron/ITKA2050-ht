## Harjoitustyöraportti

Palauttaja: Elena Mironenko, elemiron
Pisteitä yhteensä: 2pt (? En ole varma mitä voin laskea pisteiksi ja ovatko ne oikeat....) 
Pvm: 16.11.2022

## Ongelma 1

Tyyppi:   Polkuinjektio
Sijainti: delete_file()
Kuvaus:

Aliohjelmassa delete_file ei tarkasteta käyttäjän syöttämää polkua
millään tavalla. Tämä mahdollistaa sen, että käyttäjä tuhoaa minkä
tahansa tiedoston, esimerkiksi toisen käyttäjän tiedoston tai vaikkapa
jonkin järjestelmätiedoston. 

### Esimerkkihyökkäys: 

1) Kirjaudu sisään käyttäjänä "sam".
2) Tee pyyntö /delete_file?file=../sue/tiedosto.txt
3) Tulos: Suen tiedosto tuhotaan

### Korjaus:

Commit: <git hash>

Paikka, johon korjaus on tehty, on kommentoitu koodiin. Korjasin tämän kohdan
laittamalla checkPath(path)-funktion delete_file()-funktioon ennen ehtolauseita.
Korjaus toimii, koska jos yritetään laittaa osoiteriville "../" tulee virheilmoitus
eikä mitään poisteta.


### Pisteet(2pt)

----------------------------------------------------------------------------------------------------------------

## Ongelma 2

Tyyppi:   Shell-injektio
Sijainti: Aliohjelma checkerLoop
Kuvaus: 

CheckerLoop käynnistää shellin tarkistaakseen tiedoston tyypin. Tämä on ongelma, koska
vihamielinen käyttäjä pystyy tiedoston nimen avulla käskyttämään shelliä haluamallaan tavalla.

### Esimerkkihyökkäys: 

1) Kirjaudu sisään
2) Lataa kuva jonka tiedoston nimi sisällään esimerkiksi putkitetun shell käskyn
    "kuva.png;echo laavakivi"
3) shelliin ilmestyy laavakivi

### Korjaus:

Commit: 4bd62bded56dc9747f357ae94fe6bfd00b51557c

Merkkijonon sijasta lähetetään rakenteisen listan file prosessille.
Eli koodi hyödyntää erillistä kirjastoa, joka tarkistaa tiedoston tyypin.
Korjaus toimii, koska shelliä ei avata ollenkaan, vaan tiedoston tyyppi tarkistetaan erillistä kirjastoa hyödyntäen.

### Pisteet(3pt)

----------------------------------------------------------------------------------------------------------------

## Ongelma 3

Tyyppi:   Polkuinjektio
Sijainti: checkPath()-aliohjelma
Kuvaus: 

Aliohjelmassa tarkistetaan ainoastaan sisältääkö polku merkkijonon "../". Tämä ei riitä polkuinjektio hyökkäystä vastaan.

### Esimerkkihyökkäys: 

1) Kirjaudutaan sisään
2) Hae urlista tai komentorivillä ilman selainta haku, johon sisältyy suhteellinen polku, eli '../'-enkoodattuna tai
'./'-
3) "Hyökkääjä" pääsee käsiksi tiedostorakenteisiin, joihin hänellä ei tulisi olla pääsyä

### Korjaus:

Commit: f3306a89ba6ee32afa36ed289072719fde3daa3a

Korjaus tapahtuu siten, että normalisoidaan polun checkPath()-aliohjelmassa ja verrataan tätä syötettyyn polkuun. Jos polut eroavat toisistaan,
voi varmuudella heittää pathInjection-exceptionia.
Näin se ei päästä läpi suhteellisia polkuja.

### Pisteet(3pt)


----------------------------------------------------------------------------------------------------------------


## Ongelma 4

Tyyppi:  XSS-injektio
Sijainti: upload_file-Aliohjelmassa
Kuvaus: 

Tiedoston nimellä voidaan vaikuttaa html rakenteeseen ja sijoittaa sekaan ilkeämilinen scripti.

### Esimerkkihyökkäys: 

1) Kirjaudu sisään
2) Lataa tiedosto jonka tiedostonimessä on html:ää, esimerkiksi tiedostonimi voisi olla "<button onmouseover="alert("HACK!")>".
3) Tiedoston nimi muokkaa sivuston rakennetta merkittävästi ja tässä esimerkissä lisää sivustolle javascriptiä.

### Korjaus:

Commit: b51f6935c49d099c01e387d5d7ca2c3439ea4b52

Koodiin lisätään "bleach"-nimisen kirjaston, joka hoitaa käyttäjän syötteen, tässä tapauksessa tiedoston nimen sanitoimisen. 
Bleachin clean()-metodi enkoodaa tiedostonimen suotuisaan muotoon näin estetään XSS-injektio.

### Pisteet(3pt)


----------------------------------------------------------------------------------------------------------------


## Ongelma 5

Tyyppi:  Cookievirhe
Sijainti: serve_file-, delete_file-, upload_file- ja share_file-aliohjelmassa, eli kaikkialla, missä kutsutaan
         " request.cookies.get('username') " -komentoa
Kuvaus: 

Esimerkiksi Chromen developer toolssia hyödyntämällä voidaan editoida(vaihtaa) käyttäjänimen cookien arvoa.
        Esimerkiksi "samina" kirjautuneena voidaan tähän vaihtaa "sue" ja päästä käsiksi hänen tiedostoihin ja niiden
        poistamiseen, jakamiseen ja lataamiseen.

### Esimerkkihyökkäys: 

1) Kirjaudu sisään samina
2) Avaa etusivulla developer tools ja muuta application välilehden alta value sarakkeesta "sam" -> "sue". Päivitä sivu
3) Vapaa pääsy suen tiedostoihin

### Korjaus:
Commit: e5e6836b0c4a22dc69b3b57aff6152f06ad16696

Korjasimme tämän lisäämällä lähdekoodiin globaalin muuttujan, joka pitää sisällään tietoa siitä, kuka on kirjautunut
sisään viimeksi. 

Tämä korjaus toimii, koska jos sivustolla yrittää tehdä mitä vaan, kun cookien arvo on eriävä viimeksi kirjautuneen kanssa,
niin järjestelmä kaatuu ja heittää poikkeuksen, jossa kerrotaan, että on koitettu käyttää cookiesseja väärin.

### Pisteet(2pt)

----------------------------------------------------------------------------------------------------------------


## Ongelma 6

Tyyppi:  LogForging
Sijainti: user_content
Kuvaus: 

Lista hylätyistä tiedostoista laitetaan taulukkoon nimeämällä ne suoraan tiedostonimen mukaan, näin ollen nettisivulle pääsee suoraan käyttäjän syötettä.

### Esimerkkihyökkäys:
 
1) Kirjaudu sisään
2) Lisää sivulle tiedostoja, jotka eivät mene läpi .png tai .jpg testistä tai jaa "sopiva" tiedosto
3) Mahdollisuus tietyllä syötteellä väärentää hylättyjen tai jaettujen tiedostojen määrää.

### Korjaus:

Commit: 65537fc33dcd249f8e6d8b91baa8a7cff4f05a2d

Korjaus tapahtuu käyttämällä rakenteista dataa. Eli jokainen hylätty tiedosto tulee olemaan rakenteista dataa, eikä ainoastaan merkkijonoja peräkkäin.

### Pisteet(3pt)


----------------------------------------------------------------------------------------------------------------

## Ongelma 7
Tyyppi: Url tietoturva
Sijainti: Login succesfull url
Kuvaus: 

Login:n jälkeen näkee salasanan ja käyttäjänimen sivun syötteessä

### Esimerkkihyökkäys: 

1) Kirjaudu sisään
2) Jätä login succesfull näkyville
3) Pahaa tahtova taho voi nähdä käyttäjänimen ja salasanan login succesfull sivun url:ssa 
   ja kirjautua sinuna myöhemmin sisään

### Korjaus:

commit: 7d0c425a46882e6ea27739fb281648c46a4712f5

Mahdollisesti voisi toimia se, että succesfull sivua ei tulisi ollenkaan vaan ohjelma siirtyisi suoraan onnistuneen kirjautumisen jälkeen käyttäjän tietoihin.

### Pisteet(1pt)


----------------------------------------------------------------------------------------------------------------

## Ongelma 8
Tyyppi: Tietoturvaongelma
Sijainti: Käyttäjänimen ja salasanan kovakoodaus
Kuvaus: 

Lähdekoodiin on kovakoodattu kaikki käyttäjätunnukset ja salasanat, joten lähdekoodin haltija pääsee käsiksi kaikkiin käyttäjiin.

### Esimerkkihyökkäys: 

1) Pääse käsiksi lähdekoodiin, hyökkäämällä tai vahingossa.
2) Lähdekoodista pääsee käsiksi kaikkien käyttäjien kirjautumistietoihin

### Korjaus:

Commit: 84e0301fc1d795a9b38a7590acbe5cb508631703

Käyttäjänimet ja salasanat voisi siirtää tietokantaan ja salaamalla ne.

### Pisteet(1pt)


----------------------------------------------------------------------------------------------------------------

## Ongelma 9

Tyyppi: riippuvuussuhdehyökkäys
Sijainti: Lähdekoodi
Kuvaus: 

Lähdekoodiin on importattu paketteja, joita ei ole itse sinne importattu. 
Kenties myöskin haittallisia paketteja....

### Esimerkkihyökkäys: 

1) Lataa paketti, joka sisältää haitallista koodissa.
2) Paketin haitallinen koodi aiheuttaa haavoittuvuuden. 


### Korjaus:

Tarkistetaan paketit(?)

Commit: 330fa7258ee167f640e29fa2d9044543be122317


### Pisteet(1pt)